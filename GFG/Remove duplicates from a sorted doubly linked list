Remove duplicates from a sorted doubly linked list

Given a doubly linked list of n nodes sorted by values, the task is to remove duplicate nodes present in the linked list.

Example 1:

Input:
n = 6
1<->1<->1<->2<->3<->4
Output:
1<->2<->3<->4
Explanation:
Only the first occurance of node with value 1 is 
retained, rest nodes with value = 1 are deleted.
Example 2:

Input:
n = 7
1<->2<->2<->3<->3<->4<->4
Output:
1<->2<->3<->4
Explanation:
Only the first occurance of nodes with values 2,3 and 4 are 
retained, rest repeating nodes are deleted.
Your Task:
You have to complete the method removeDuplicates() which takes 1 argument: the head of the linked list.  Your function should return a pointer to a linked list with no duplicate element.

Constraint:
1 <= n <= 105
Expected Time Complexity: O(n)


solution: 

TC - O(n)
Sc - O(n) (due to hashset)


class Solution
{
    Node removeDuplicates(Node head)
    {
        HashSet<Integer>set=new HashSet<>();
        Node curr=head;
        while(curr!=null)
        {
            if(set.contains(curr.data))
            {
               if (curr.prev != null) {
                    curr.prev.next = curr.next;
                }
                if (curr.next != null) {
                    curr.next.prev = curr.prev;
                }
            }else{
                set.add(curr.data);
            }
            curr=curr.next;
        }
        return head;
    }
}