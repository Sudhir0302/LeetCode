Problem statement
Given an array/list of length ‘n’, where the array/list represents the boards and each element of the given array/list represents the length of each board. Some ‘k’ numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.



You are supposed to return the area of the minimum time to get this job done of painting all the ‘n’ boards under a constraint that any painter will only paint the continuous sections of boards.



Example :
Input: arr = [2, 1, 5, 6, 2, 3], k = 2

Output: 11

Explanation:
First painter can paint boards 1 to 3 in 8 units of time and the second painter can paint boards 4-6 in 11 units of time. Thus both painters will paint all the boards in max(8,11) = 11 units of time. It can be shown that all the boards can't be painted in less than 11 units of time.


solution:   

import java.util.ArrayList;

public class Solution 
{
    public static int findLargestMinDistance(ArrayList<Integer> b, int k)
    {
        int max=0,sum=0;
        for(int d : b)
        {
            max=Math.max(max,d);
            sum+=d;
        }
        int i=max,j=sum;
        while(i<=j)
        {
            int mid=i+(j-i)/2;
            if(check(b,mid)<=k){
                j=mid-1;
            }else{
                i=mid+1;
            }
        }
        return i;
    }
    public static int check(ArrayList<Integer>b,int m)
    {
        int sum=0;
        int c=1;
        for(int d : b)
        {
            if(sum+d<=m){
                sum+=d;
            }else{
                sum=d;
                c++;
            }
        }
        return c;
    }
}