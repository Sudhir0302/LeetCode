You are given two arrays with positive integers arr1 and arr2.

A prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not.

A common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have a common prefix 565 while 1223 and 43456 do not have a common prefix.

You need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2.

Return the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0

Hint 1 : Put all the possible prefixes of each element in arr1 into a HashSet.
Hint 2 : For all the possible prefixes of each element in arr2, check if it exists in the HashSet.

solution: //just do what the hint sayss

class Solution 
{
    public int longestCommonPrefix(int[] arr1, int[] arr2) 
    {
        HashSet<String>set=new HashSet<>();
        for(int n : arr1)
        {
            String s=String.valueOf(n);
            for(int i=0;i<s.length();i++)
            {
                set.add(s.substring(0,i+1));
            }
        }
        int max=0;
        System.out.print(set);
        for(int n : arr2)
        {
            String s=String.valueOf(n);
            for(int i=0;i<s.length();i++)
            {
                String pref=s.substring(0,i+1);
                if(set.contains(pref)){
                    max=Math.max(max,pref.length());
                }
            }
        }
        return max;
    }
}