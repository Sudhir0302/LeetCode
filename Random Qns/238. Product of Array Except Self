238. Product of Array Except Self

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


solution:

Method - 1 (using division operator)

class Solution 
{
    public int[] productExceptSelf(int[] nums) 
    {
        int[] ans=new int[nums.length];
        int pro=1,yes=0;
        for(int d : nums)
        {
            if(d!=0)
                pro*=d;
            else
                yes++;       
        }
        if(yes>1){
            return ans;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0&&yes>=1){
                ans[i]=0;
            }else if(yes==0){
                ans[i]=pro/nums[i];
            }else{
                ans[i]=pro;
            }
        }
        return ans;
    }
}

Method - 2

//As it requires not to use divide operator
//using prefix and suffix

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answer = new int[n];
        int prefix = 1, suffix = 1;
        for (int i = 0; i < n; i++) {
            answer[i] = prefix;
            prefix *= nums[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            answer[i] *= suffix;
            suffix *= nums[i];
        }
        return answer;
    }
}