Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Input: arr[] = [1, 3 , 2]
Output: [1, 2, 3]
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 105

solution : 

class Solution 
{

    void mergeSort(int a[], int low, int high) 
    {
        if(low==high) return;
        int mid=low+(high-low)/2;
        
        mergeSort(a,low,mid);
        mergeSort(a,mid+1,high);
        merge(a,low,mid,high);
    }
    void merge(int[] a,int low,int mid,int high)
    {
        int l=low;
        int r=mid+1;
        int i=0;
        int[] tmp=new int[high-low+1];
        while(l<=mid&&r<=high){
            if(a[l]<=a[r]){
                tmp[i++]=a[l];
                l++;
            }else{
                tmp[i++]=a[r];
                r++;
            }
        }
        while(l<=mid){
            tmp[i++]=a[l];
            l++;
        }
        while(r<=high){
            tmp[i++]=a[r];
            r++;
        }
        for(int j=low;j<=high;j++){
            a[j]=tmp[j-low];
        }
    }
}
