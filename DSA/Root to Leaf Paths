Root to Leaf Paths

Given a Binary Tree, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Note: The paths should be returned such that paths from the left subtree of any node are listed first, followed by paths from the right subtree.

Examples:

Input: root[] = [1, 2, 3, 4, 5]
ex-3
Output: [[1, 2, 4], [1, 2, 5], [1, 3]] 
Explanation: All possible paths: 1->2->4, 1->2->5 and 1->3
Input: root[] = [1, 2, 3]
       1
    /     \
   2       3
Output: [[1, 2], [1, 3]] 
Explanation: All possible paths: 1->2 and 1->3
Input: root[] = [10, 20, 30, 40, 60]
         10
       /    \
      20    30
     /  \
    40   60
Output: [[10, 20, 40], [10, 20, 60], [10, 30]]
Explanation: All possible paths: 10->20 ->40, 10->20->60 and 10->30
Constraints:
1<=number of nodes<=104
1<=node->data<=104

solution:

class Solution 
{
    public static ArrayList<ArrayList<Integer>> Paths(Node root) 
    {
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
        back(root,ans,new ArrayList<>());
        return ans;
    }
    public static void back(Node root,ArrayList<ArrayList<Integer>>ans,ArrayList<Integer>tmp)
    {
        if(root==null){
            return;
        }
        tmp.add(root.data);
        if(root.left==null&&root.right==null){
            ans.add(new ArrayList<>(tmp));
        }else{
            back(root.left,ans,tmp);
            back(root.right,ans,tmp);
        }
        tmp.remove(tmp.size()-1);
    }
}

