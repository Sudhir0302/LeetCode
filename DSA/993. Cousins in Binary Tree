Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

solution: 


//bfs solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public boolean isCousins(TreeNode root, int x, int y) 
    {
        Queue<TreeNode>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            int len=q.size();
            boolean fx=false,fy=false;
            TreeNode px=null;
            TreeNode py=null;
            for(int i=1;i<=len;i++)
            {
                TreeNode curr=q.poll();
                if(curr.left!=null)
                {
                    if(curr.left.val==x){
                        fx=true;
                        px=curr;
                    }
                    if(curr.left.val==y){
                        fy=true;
                        py=curr;
                    }
                    q.add(curr.left);
                }
                if(curr.right!=null)
                {
                    if(curr.right.val==x){
                        fx=true;
                        px=curr;
                    }
                    if(curr.right.val==y){
                        fy=true;
                        py=curr;
                    }
                    q.add(curr.right);
                }   
            }
            if(fx&&fy){
                return px!=py;
            }
        }
        return false;
    }
}

